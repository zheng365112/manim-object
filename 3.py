from manimlib.imports import *
class TMD(Scene):
    def construct(self):
        #making objects
        text1 = Text('welcome!', font='Comic Sans MS').shift(LEFT*4.5+UP*3).set_color(['#66CCFF'])
        text2 = TextMobject('相信大家都'
                            '听说过梅涅劳斯定理：').set_color(['#39C5BB']).shift(UP*3+LEFT*3)
        text3 = TextMobject('就是指：如果一条直线与'
                            '$\\triangle$'
                            'ABC的三边'
                            'AB、BC、CA').shift(UP*3)
        tet3=TextMobject( '与其延长线交于F、D、E点，则有：')
        tet3.next_to(text3, DOWN, aligned_edge=LEFT)
        tex3=TextMobject('${AF\over FB} \\times {BD\over DC}\\times{CE\over EA}=1$').set_color(['#39C5BB'])
        tex3.next_to(tet3, DOWN, aligned_edge=LEFT)
        text4 = TextMobject('但是，我们'
                            '应该如何证明它呢？').set_color([BLUE_C])
        text4.next_to(tex3, DOWN, aligned_edge=LEFT)
        text5 = TextMobject('我们在平面任取去三个点：p1, p2, p3').set_color(['#66CCFF']).shift(UP*3+LEFT*2)
        p1 = np.array([-1, 1, 0])
        p2 = np.array([3, -2, 0])
        p3 = np.array([-1, -3, 0])
        dot = Dot(p1)
        dot2 = Dot(p2)
        dot3 = Dot(p3)
        text6 = TextMobject('顺次链接p1,p2,p3,使其成为'
                            '$\\triangle$'
                            'ABC').set_color(['#66CCFF'])
        text6.next_to(text5, DOWN, aligned_edge=LEFT)
        tex1 = Text('p1')
        tex1.next_to(dot, UP, aligned_edge=UP)
        tex2 = Text('p2')
        tex2.next_to(dot2, UR)
        te3 = Text('p3')
        te3.next_to(dot3, UP)
        tex4 = Text('A')
        tex5 = Text('B')
        tex6 = Text('C')
        tex4.next_to(dot, UP, aligned_edge=UP)
        tex5.next_to(dot2, UR)
        tex6.next_to(dot3, UP)
        triangle = Polygon(p1, p2, p3)
        triangle.set_fill(color=ORANGE,opacity=0.5)
        triangle.set_stroke(color='#39C5BB', width=2)
        line1 = DashedLine(
            np.array([3, -2, 0]), np.array([-1, -3, 0]))
        line1.scale(3)
        line2 = Line()
        line2.put_start_and_end_on(
            np.array([1, -0.5, 0]),
            np.array([-3, -3.5, 0])
        )
        line2.scale(2.5)
        dot4 = Dot(np.array([1, -0.5, 0])).set_color(['#66CCFF'])
        dot5 = Dot(np.array([-1, -2, 0])).set_color(['#66CCFF'])
        dot6 = Dot(np.array([-3, -3.5, 0])).set_color(['#66CCFF'])
        text7 = Text('F').set_color(['#66CCFF'])
        text7.next_to(dot4, UP)
        text8 = Text('E').set_color(['#66CCFF'])
        text8.next_to(dot5, UP)
        text9 = Text('D').set_color(['#66CCFF'])
        text9.next_to(dot6, UP)
        text10 = TextMobject('或许你们会很疑惑，在想这到底怎样去证？').shift(UP*3+LEFT*2).set_color(['#66CCFF'])
        text11 = TextMobject('别着急，请听我慢慢到来').set_color(['#66CCFF'])
        text11.next_to(text10, DOWN, aligned_edge=LEFT)
        text12 = TextMobject('证法一：').shift(UP*3+LEFT*2).set_color(['#66CCFF'])
        text13 = TextMobject('过点C作CP∥DF交AB于P').set_color(['#66CCFF'])
        text13.next_to(text12, DOWN, aligned_edge=LEFT)
        text14 = TextMobject('下面我家为大家带来证明思路：').set_color(['#66CCFF']).shift(UP*2.5+LEFT*2)
        #showing objects

        self.play(Write(text1))
        self.play(ReplacementTransform(text1, text2))
        self.play(FadeOut(text2))
        self.play(Write(text3), run_time=2.5)
        self.play(Write(tet3))
        self.play(Write(tex3))
        self.play(Write(text4))
        self.wait(1.6)
        self.play(FadeOut(text3))
        self.play(FadeOut(tet3))
        self.play(FadeOut(tex3))
        self.play(FadeOut(text4))
        self.play(Write(text5))
        self.play(Write(text6))
        self.play(Write(dot))
        self.play(Write(tex1))
        self.play(Write(dot2))
        self.play(Write(tex2))
        self.play(Write(dot3))
        self.play(Write(te3))
        self.play(Write(triangle), run_time=2.7)
        self.play(Transform(tex1, tex4))
        self.play(Transform(tex2, tex5))
        self.play(Transform(te3, tex6))
        self.play(Write(line1), run_time=1.3)
        self.play(Write(line2), run_time=1.3)
        self.play(Write(dot4))
        self.play(Write(text7))
        self.play(Write(dot5))
        self.play(Write(text8))
        self.play(Write(dot6))
        self.play(Write(text9))
        self.play(ReplacementTransform(text5, text10))
        self.play(ReplacementTransform(text6, text11))
        self.play(ReplacementTransform(text10, text12))
        self.play(ReplacementTransform(text11, text13))
        self.play(FadeOut(text12))
        self.play(ReplacementTransform(text13, text14))
        self.play(FadeOut(text14))
class Scene_2(Scene):
    def construct(self):
        p1 = np.array([-1, 1, 0])
        p2 = np.array([3, -2, 0])
        p3 = np.array([-1, -3, 0])
        dot = Dot(p1)
        dot2 = Dot(p2)
        dot3 = Dot(p3)
        tex1 = Text('p1')
        tex1.next_to(dot, UP, aligned_edge=UP)
        tex2 = Text('p2')
        tex2.next_to(dot2, UR)
        te3 = Text('p3')
        te3.next_to(dot3, UP)
        tex4 = Text('A')
        tex5 = Text('B')
        tex6 = Text('C')
        tex4.next_to(dot, UP, aligned_edge=UP)
        tex5.next_to(dot2, UR)
        tex6.next_to(dot3, UP)
        triangle = Polygon(p1, p2, p3)
        triangle.set_fill(color=ORANGE, opacity=0.5)
        triangle.set_stroke(color='#39C5BB', width=2)
        line1 = DashedLine(
            np.array([3, -2, 0]), np.array([-1, -3, 0]))
        line1.scale(3)
        line2 = Line()
        line2.put_start_and_end_on(
            np.array([1, -0.5, 0]),
            np.array([-3, -3.5, 0])
        )
        line2.scale(2.5)
        dot4 = Dot(np.array([1, -0.5, 0])).set_color(['#66CCFF'])
        dot5 = Dot(np.array([-1, -2, 0])).set_color(['#66CCFF'])
        dot6 = Dot(np.array([-3, -3.5, 0])).set_color(['#66CCFF'])
        text7 = Text('F').set_color(['#66CCFF'])
        text7.next_to(dot4, UP)
        text8 = Text('E').set_color(['#66CCFF'])
        text8.next_to(dot5, UP)
        text9 = Text('D').set_color(['#66CCFF'])
        text9.next_to(dot6, UP)
        self.play(Write(dot))
        self.play(Write(tex1))
        self.play(Write(dot2))
        self.play(Write(tex2))
        self.play(Write(dot3))
        self.play(Write(te3))
        self.play(Write(triangle), run_time=2.7)
        self.play(Transform(tex1, tex4))
        self.play(Transform(tex2, tex5))
        self.play(Transform(te3, tex6))
        self.play(Write(line1), run_time=1.3)
        self.play(Write(line2), run_time=1.3)
        self.play(Write(dot4))
        self.play(Write(text7))
        self.play(Write(dot5))
        self.play(Write(text8))
        self.play(Write(dot6))
        self.play(Write(text9))
        text1 = TextMobject('在$\\triangle$ABC中，').shift(UP*3+LEFT*3).set_color(['#39C5BB'])
        text2 = TextMobject('过点C作CP '
                            '$\setminus \setminus $'
                            'DF交AB于P').set_color(['#39C5BB'])
        text2.next_to(text1, DOWN, aligned_edge=LEFT)
        self.play(Write(text1))
        self.play(Write(text2))
        lin1 = DashedLine()
        lin1.put_start_and_end_on(np.array([-1, -3, 0]), np.array([1, -1.5, 0]))
        lin1.scale(2)
        self.play(Write(lin1))
        do = Dot(np.array([1.6666666666666667, -1.0, 0])).set_color(['#66CCFF'])
        tex1 = Text('P').set_color(['#66CCFF'])
        tex1.next_to(do, UP)
        self.play(Write(do))
        self.play(Write(tex1))
        text10 = TextMobject('相信大家已经看出来了吧：就是用相似证:').set_color(['#39C5BB']).shift(UP*3+LEFT*2)
        self.play(ReplacementTransform(text1, text10))
        self.play(FadeOut(text2))
class Scene_3(Scene):
    def construct(self):
        text = TextMobject('下面为大家带来详细的说明：').set_color(['#66CCFF']).shift(LEFT*2+UP*3)
        text2 = TextMobject('$\\because$'
                            'CP平行于DF').shift(UP*3+LEFT*2).set_color(['#39C5BB'])
        tex2 = TextMobject('$\\therefore$'
                            '$\\triangle AEF \sim \\triangle ACP,\\quad \\triangle FBD \sim PBC$').set_color(['#39C5BB'])
        text3 = TextMobject('$\\therefore{BD\over DC}={BF\over FP},\quad {CE\over EA}={PF\over FA}$').set_color(['#39C5BB'])
        tex2.next_to(text2, DOWN, aligned_edge=LEFT)
        text3.next_to(tex2, DOWN, aligned_edge=LEFT)
        self.play(Write(text))
        self.play(ReplacementTransform(text, text2))
        self.play(Write(tex2), run_time=1.5)
        self.play(Write(text3), run_time=1.5)
        text4 = TextMobject('$\\therefore{AF\over FB} \\bullet {BD\over DC} \\bullet{CE\over EA}={AF\over FB}\\bullet{BF\over FP}\\bullet{PF\over FA}=1$').set_color(['#39C5BB'])
        text4.next_to(text3, DOWN, aligned_edge=LEFT)
        self.play(Write(text4), run_time=1.5)
class Scene_4(Scene):
    def construct(self):
        text = TextMobject('我们可以用它来判定三点共线等等。。。').shift(LEFT*2+UP*3)
        text2 = Text('bye bye!!!', font='Comic Sans MS').set_color(['#39C5BB'])
        self.play(ReplacementTransform(text, text2))